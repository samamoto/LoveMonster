*******************************************************************************
コメント　
*******************************************************************************
何をしているか、よりも何のための処理か、を書く

例：
//プレイヤーが死んだらスピードを0にする	：×　見たらわかる
//動きを止める				：〇
if(player.live == false)
{
	player.speed = 0.0f;
}

ToDo
未完成の処理、未着手の処理には必ず書く

使わなくなった処理
コメント化して置いておく
消す場合はgitにコメントとしてどの処理を消したか書いておく



*******************************************************************************
メンバ変数
*******************************************************************************
先頭にm_つける
大文字小文字は自由　ただし自分なりにきちんと法則は立てること



*******************************************************************************
ローカル変数
*******************************************************************************
特に規定なし
ただし後から見て意味の分からない変数名にならないようにする



*******************************************************************************
関数
*******************************************************************************
publicのもののに関しては先頭に_をつける
その次の文字はpublic、private関係なく大文字で
	/// <summary>
	/// 
	/// </summary>
関数の名前の上でスラッシュ3回打てば自動でこんなのでてくるからここにコメント
<summary>の間には
「この関数はどういうときに呼ばれるのか」を書く
何をしている関数なのかは関数名で分かるようにする
例：
	/// <summary>
	/// プレイヤーがジャンプしたとき
	/// </summary>
	public void _PlaySoundByJump()
{
...
}


*******************************************************************************
コンポーネント
*******************************************************************************
作った関数内で解決されるように作る
GetCompornentで別クラスで呼ばなくても動くように作る
作ったスクリプトはオブジェクトに直接アタッチして、そのスクリプトのUpdateで
全部済むように作る
InputとAudioは例外にするが、それ以外のスクリプト同士は基本不干渉
各オブジェクト用のベースコンポーネントは作成するが、そこに処理は存在しないようにする
あくまで状態管理用で、privateな変数とそれのゲッターくらいしかない状態のものになる









